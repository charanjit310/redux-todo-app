https://stackblitz.com/edit/react-wjdepp
https://randomuser.me/api/
https://jsonplaceholder.typicode.com/users
--------react-form-hook--------
npm install react-hook-form
npm install @hookform/resolvers
npm install yup
--------Redux--------------
npm install redux react-redux

-------redux-devtools-extension----
npm install redux-devtools-extension



what are the parameters of creatStore()
https://blog.logrocket.com/localstorage-javascript-complete-guide/
what is helpers/history.js
null vs undefined https://stackoverflow.com/a/5076962



  // import { Storage } from "./services/storage.service";
  // const userKeyPrefix = 'users'
  // const setUser = Storage.setJSON(userKeyPrefix, { name: 'aaa' })
  // const allUsers = Storage.getJSON(userKeyPrefix)
  // console.log(allUsers);


Redux Thunk is middleware that allows action creator to return function rather than the object 
or just actions.
With the help of the redux-thunk we can pass actions creator to our dispatch() that perform 
some side3effects like API's call to server and to responses of these api calls we can dispatch other 
action creators

WF-Admin-Page-22 :- Download Report Questionaire:- what is the format of the Questionaire report.
WF-SP-Page-22 :- Download Report Questionaire:- what is the format of the Questionaire report.




console.log(abc())
fucntion abc(){ console.log('something')}
clousers :- it gives proivate sapce to your variable
[a,b] =[b,a]
event loop
micro servives ? : monolethic:- this is another type
lazy loading
binear linear 
sort, map
var, let, cosnt , clousers
pass state from child to parent component ?
how javascript runs i browswers
callbacks ?
diff map vs forech
covert obj to array 
why use react 
useRef
https://dev.to/banesag/javascript-logical-operators-and-boolean-values-1l07
how to persists state  reactjs
Optional chaining (?.)
    

    const a = true
    console.log(a) // true ('a' is true)
    console.log(!a) // false ('a' is false)

    //Instead of using ternary operator use '||'
    const var1 = 0 // false value
    const var2 = var1 ? var1 : "something";
    const var3 = var1 || "something";
    console.log(!!var1) // false
    console.log(var2)   // "something"
    console.log(var3)   // "something"

    // logical NOT
    const a = true, b = false;
    console.log(!a); // false
    console.log(!b); // true
    ! evaluates to true if the operand is false and vice-versa.

    // logical OR
    const a = true, b = false, c = 4;
    console.log(a || b); // true
    console.log(b || b); // false
    console.log((c>2) || (c<2)); // true
    || evaluates to true if either of the operands is true. And evaluates to false If both operands are false,

    // logical AND
    const a = true, b = false; c = 4;
    console.log(a && a); // true
    console.log(a && b);  // false
    console.log((c > 2) && (c < 2)); // false
    && evaluates to true if both the operands are true, else evaluates to false.The value returned will be the last truthy value if they are all true, but it will return the first falsy value if at least one value is false.
    
    // Double NOT (!!)
    Using double negation (!!) can help you to find if a value is truthy or falsy,
      ex:- 
        !! ‘ ’; // empty string value is false<< false
        !!“hello”; << true
        !!3; << true

    --OR--
    It converts a nonboolean to boolean value.it gives original value in form of boolean.
    (for ex, !5(5 is not true) would be false, because 5 is a true value ), 
    then boolean-inverts that so you get the original value as a boolean (so !!5 would be true, means 5 is true).
    var foo = "Hello World!";
    !foo // Result: false :- ! it evaluates to true if the operand is false and vice-versa
    !!foo // Result: true :- !! it converts any obj to boolean and gives the original value in the form of boolean

    // ?? operator:- it only checks for null or undefined.
    foo ?? bar
    would be the same as:
    foo != null ? foo : bar

    // Spread operators :- Adding array elements to an existing array
    const arr = [1, 2, 3];
    const arr2 = [...arr];

    // Rest  operators :- collapsing all remaining arguments of a function into one array
    function sum( first, ...others ) {
    for ( var i = 0; i < others.length; i++ )
        first += others[i];
        return first;
    }
    console.log(sum(1,2,3,4))// sum(1, 2, 3, 4) == 10;